//タスクバラし

[HTML]TODO入力フォームを作成
[Bootstrap]見た目を整える
[JacaScript]TODOを表示・保存
[JacaScript]TODOを削除
[JacaScript]TODOを完了


//データを取るタイミング

・ユーザーがエンターを押した時

・必要な知識：変数、関数、addEventlistener


//変数

・データの入れ物

・使い所：データを使いまわしたい時


//変数の種類
・let,const,var


//let
・値の再代入が可能
 let height = 168;
 height = 170;


//const
・値の再代入が不可
・定数の宣言
  const tax = 0.1;
  tax = 0.2;
  //エラー


//関数
　
・一連の処理を一つの処理としてまとめたもの

・使い所：同じ処理を使いまわしたい時

founction double(num){
  retrun num *2 ;
}
　double(4);
//8


//addEventListener

・特定のイベントが起きた時にJavaScriptの処理を追加するためのブラウザのAPIの機能

・使い所：イベントが起きた時に処理を追加したい時

ターゲット.addEventListener(イベント名,関数);

form.addEventListener("submit",
founction(){
  console.log();
})

//if文

if(条件式){
  //条件式の評価結果が
  //trueなら実行する処理
}

if(true){
  console.log("実行");
}


//データ型
・データ型　＝　データの種類
・データの種類によってできることを
  区別するために存在

①プリミティブ型
  -真偽値
  -数値
  -文字列
  -et

②オブジェクト
  -オブジェクト
  -配列
  -関数
  -etc


//型変換
・暗黙的型変換

・なんのため：データ型を意識しなくても
  プログラムが書けるように

・if文の条件式　→ データを真偽値に変換


//真偽値の判定

・falseになる値
-false
-On
-undefined
-null
-0
-""（空文字)
・それ以外の全ての値はtrue



//課題
・画面をリロードするとデータが消える
・どうすればデータを残せる？
・ローカルストレージに保存する


//配列

・値に順序をつけて格納できるオブジェクト
・使い所：複数の値をまとめて扱いたい時

const array = [
  "one",
  "two",
  "three"
];

array[0]; // => "one"
array.push("four");
arrya[3]); // => "four"



//ループ

・繰り返し処理を行うもの
・使い所:同じ処理を繰り返したい時
・forEach：配列の全要素に対して反復処理

const array = [1,2,3];

array.forEach(value => {
  console.log(value * 2);
})

//2,4,6



//localStorage
・今まで：データを保存しておく場所がない
・ブラウザにデータを保存しておく仕組み

//データの保存
locslStorage.setItem('キー','値');

//データの取得
localStorage.getItem('キー');



//オブジェクト
・名前と値がついになったものの集合体
・使い所：一つのものに対し、複数の属性データをもたせたい

let user = {
  name:"Yamaura",
  age:33,
  printAge: founction(){
    console.log(this.age);
  }
};


user.name;         //=>"Yamaura"
user.printAge()    //=>33
